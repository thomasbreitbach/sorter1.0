cmdhistory=["(while (pos? @a) (do (println @a) (swap\! a dec)))" "(test)" "(print test)" "(println \\"test\\")" "(println \\"Some available input keys\\")" "clear-agent-errors" "(find-ns Sorter.gui)" "(find-ns gui)" "cln" "(def eager (doseq [x [1 2 3]] (println 'eager x)))" "(compile 'Sorter.cmd)" "java -cp ./classes\:clojure.jar Sorter.cmd TEST" "java -Dclojure.compile.path\=D\:/ -cp D\:/clojure.jar Sorter.cmd" "(compile Sorter.cmd)" "(compile 'Sorter.cmd)" "jar cvf awesome.jar -C classes ." "lein new my-projekt" "(complie project.clj)" "lein uberjar\\r\\njava -jar target/clojure-noob-0.1.0-SNAPSHOT-standalone.jar" "lein repl" "(defn doSomeFancyShit [rFormats]\\n  (\\n    (def value (first rFormats))\\n    (if (\= not-nil? value))\\n      (\\n        (println value) \\n        (doSomeFancyShit (next rFormats))\\n      )    \\n    )\\n    )" "(def not-nil? (complement nil?))" "(defn doSomeFancyShit [rFormats]\\n  (\\n    (def value (first rFormats))\\n    (if (\= not-nil? value))\\n      (\\n        (println value) \\n        (doSomeFancyShit (next rFormats))\\n      )    \\n    )\\n    )" "(def rawFormats [\\".CR2\\" \\".NEF\\" \\".RAW\\" \\".DNG\\"])" "(def imgFormats (conj rawFormats [\\".jpg\\"]))" "(imgFormats)" "(def imgFormats (conj [rawFormats] [\\".jpg\\"]))" "(imgFormats)" "imgFormats" "(def imgFormats (conj rawFormats \\".jpg\\"))" "imgFormats" "(defn files-of \\n  (fn [dir]\\n    ((def directory (clojure.java.io/file dir))\\n      file-seq directory)))" "\\n(def files-of \\n  (fn [dir]\\n    ((def directory (clojure.java.io/file dir))\\n      file-seq directory)))" "(files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg\\")" "(def files-of \\n  (fn [dir]\\n    ((file-seq (clojure.java.io/file dir)))" "(def files-of \\n  (fn [dir]\\n    ((file-seq (clojure.java.io/file dir)))))" "(files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg\\")" "(def files-of \\n  (fn [dir]\\n    (\\n      file-seq (clojure.java.io/file (str (dir)))\\n     )\\n   )\\n)" "(files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg\\")" "(def files-of \\n  (fn [dir]\\n    (\\n      file-seq (clojure.java.io/file dir)\\n     )\\n   )\\n)" "(files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg\\")" "(defn files-of\\n  \\"Lists all files in the given path\\"\\n  (fn [dir]\\n    (file-seq (clojure.java.io/file dir)))\\n)" "(defn files-of [dir]\\n  \\"Lists all files in the given path\\"\\n    (file-seq (clojure.java.io/file dir)))" "(files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg\\")" "(files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/\\")" "(count (files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/\\"))" "(defn count-files-of [dir]\\n  \\"count\\"\\n  (count (files-of dir)))" "(count-files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\")" "(defn check-extension\\n  \\"check-extention takes a prefix and returns a predicate \\n  that checks a string if it ends with this\\"\\n  [p]\\n  (fn [s] (.endsWith s p)))" "(filter (check-extension imgFormats) (files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\"))" "(defn files-of [dir]\\n  \\"Lists all files in the given path\\"\\n    (str (file-seq (clojure.java.io/file dir))))" "(defn check-extension\\n  \\"check-extention takes a prefix and returns a predicate \\n  that checks a string if it ends with this\\"\\n  [p]\\n  (fn [s] (.endsWith s p)))" "(filter (check-extension imgFormats) (files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\"))" "(files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\")" "(defn files-of-as-string [dir]\\n  \\"List all filenames in the given path as string\\"\\n  (.list (clojure.java.io/file dir)))" "(files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha\\")" "(defn files-of-as-string [dir]\\n  \\"List all filenames in the given path as string\\"\\n  (.listFiles (clojure.java.io/file dir)))" "(files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha\\")" "(filter (check-extension imgFormats) (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha\\"))" "(defn files-of-as-string [dir]\\n  \\"List all filenames in the given path as string\\"\\n  (.list (clojure.java.io/file dir)))" "(filter (check-extension imgFormats) (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha\\"))" "(filter (check-extension imgFormats) \\"/bejfndjefn/bdwjbdjw.jpg\\")" "(filter (check-extension imgFormats) (str \\"/bejfndjefn/bdwjbdjw.jpg\\"))" "(filter (check-extension imgFormats) (str (\\"/bejfndjefn/bdwjbdjw.jpg\\")))" "(filter (check-extension \\".jpg\\") (str (\\"/bejfndjefn/bdwjbdjw.jpg\\")))" "(filter (check-extension \\".jpg\\") \\"/bejfndjefn/bdwjbdjw.jpg\\")" "(filter (check-extension \\".jpg\\") (str (\\"/bejfndjefn/bdwjbdjw.jpg\\")))" "(.listFiles (java.io.File. \\".\\")\\n  (reify\\n    java.io.FileFilter\\n    (accept [this f]\\n      (.isDirectory f))))" "(Class (count-files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\"))" "(str (count-files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\"))" "(count-files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\")" "(defn count-files-of [dir]\\n  \\"counts files of the given directory.\\"\\n  (count (files-of-as-file dir)))" "(defn files-of-as-file [dir]\\n  \\"Lists all files in the given path\\"\\n    (file-seq (clojure.java.io/file dir)))" "(defn count-files-of [dir]\\n  \\"counts files of the given directory.\\"\\n  (count (files-of-as-file dir)))" "(count-files-of \\"/home/thomas/Bilder/15.11 Party bei Katha\\")" "imgFormats" "(count-files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")" "(files-of-as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")" "(files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")" "(get (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\") 0)" "(get (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\") 1)" "(get (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\") 2)" "(nth (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\") 2)" "(defn count-files-of [dir]\\n  \\"counts files of the given directory.\\"\\n  (count (files-of-as-string dir)))" "(count-files-of \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")" "(filter (fn [x] ()) (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")" "(files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")" "(filterv (fn [x]\\n           (.endWith \\".jpg\\"))\\n         (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\"))" "(filterv (fn [x]\\n           (.endsWith \\".jpg\\"))\\n         (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\"))" "(filterv (fn [x]\\n           (.endsWith x \\".jpg\\"))\\n         (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\"))" "(filter (fn [x]\\n          (.endsWith x \\".jpg\\"))\\n         (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\"))" "(filterv (fn [x]\\n           (.endsWith x \\".jpg\\"))\\n         (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\"))" "(filterv (fn [x]\\n           (.endsWith x imgFormats))\\n         (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\"))" "(map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\"))\\n       imgFormats))" "(map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-string \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")))\\n       imgFormats)" "(defn filter-extension [dir]\\n\\"\\"\\n(map (fn [p]\\n     (filterv (fn [s]\\n                (.endsWith s p))\\n              (files-of-as-string dir)))\\n     imgFormats))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\")" "(defn filter-extension [dir formats]\\n  \\"\\"\\n  (map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-string dir)))\\n       formats))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir img-formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-string dir)))\\n       img-formats))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/\\" imgFormats)" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\" imgFormats)" "(def imgFormats (conj rawFormats [\\".jpg\\" \\".JPG\\"]))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\" imgFormats)" "(defn list-images [dir img-formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-string dir)))\\n       img-formats))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\" imgFormats)" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-string dir)))\\n       formats))" "(list-images\\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn filter-extension [dir formats]\\n     \\"\\"\\n     (map (fn [p]\\n          (filterv (fn [s]\\n                     (.endsWith s p))\\n                   (files-of-as-string dir)))\\n          formats))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(def imgFormats (conj rawFormats \\".jpg\\"))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(def imgFormats (conj rawFormats \\".jpg\\" \\".JPG\\"))" "(filter-extension \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-string dir)))\\n       formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filterv (fn [s]\\n                  (.endsWith s p))\\n                (files-of-as-file dir)))\\n       formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filterv (check-extension p)\\n                (files-of-as-string dir)))\\n       formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filter (check-extension p)\\n                (files-of-as-string dir)))\\n       formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (conj (map (fn [p]\\n           (filterv (check-extension p)\\n                    (files-of-as-string dir)))\\n           formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  ((map (fn [p]\\n        (filter (check-extension p)\\n                 (files-of-as-string dir)))\\n        formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  ((map (fn [p]\\n        (filter (check-extension p)\\n                 (files-of-as-string dir)))\\n        formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filter (check-extension p)\\n                (files-of-as-string dir)))\\n       formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  ((mapv (fn [p]\\n         (filterv (check-extension p)\\n                  (files-of-as-string dir)))\\n        formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  ((mapv (fn [p]\\n         (filter (check-extension p)\\n                  (files-of-as-string dir)))\\n        formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  ((map (fn [p]\\n        (filterv (check-extension p)\\n                 (files-of-as-string dir)))\\n        formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  ((map (fn [p]\\n        (filterv (check-extension p)\\n                 (files-of-as-string dir)))\\n        formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filterv (check-extension p)\\n                (files-of-as-string dir)))\\n        formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (conj (map (fn [p]\\n             (filter (check-extension p)\\n                      (files-of-as-string dir)))\\n              formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (apply conj (map (fn [p]\\n                   (filter (check-extension p)\\n                            (files-of-as-string dir)))\\n                    formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (apply conj (map (fn [p]\\n                   (filterv (check-extension p)\\n                            (files-of-as-string dir)))\\n                    formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [x] (conj x) (map (fn [p]\\n                             (filter (check-extension p)\\n                                      (files-of-as-string dir)))\\n                              formats))))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (map (fn [p]\\n       (filter (check-extension p)\\n                (files-of-as-string dir)))\\n        formats))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw\\" imgFormats)" "(defn exif-for-filename\\n  \\"Loads a file from a give filename and extracts exif information into a map\\"\\n  [filename]\\n  (exif-for-file (FileInputStream. filename)))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-directories (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-directories)]\\n    (into {} (map extract-from-tag tags))))" "exif-directory-regex" "(exif-for-file \\"/home/thomas/Arbeitsfl\u00E4che/bryan.jpg\\")" "(ns Sorter.exif\\n  (\:use [clojure.string \:only [join]])\\n  (\:import [java.io BufferedInputStream FileInputStream]\\n           [com.drew.imaging ImageMetadataReader]))" "(exif-for-file \\"/home/thomas/Arbeitsfl\u00E4che/bryan.jpg\\")" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (into {} (map (fn [p]\\n                (filter (check-extension p)\\n                         (files-of-as-string dir)))\\n                 formats)))" "(def rawFormats [\\".CR2\\" \\".NEF\\" \\".RAW\\" \\".DNG\\"])\\n(def imgFormats (conj rawFormats \\".jpg\\" \\".JPG\\"))" "(defn check-extension\\n  \\"check-extention takes a prefix and returns a predicate \\n  that checks a string if it ends with this\\"\\n  [p]\\n  (fn [s] (.endsWith s p)))" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (into {} (map (fn [p]\\n                (filter (check-extension p)\\n                         (files-of-as-string dir)))\\n                 formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (into {} (map (fn [p]\\n                (filterv (check-extension p)\\n                         (files-of-as-string dir)))\\n                 formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (into {} (mapv (fn [p]\\n                 (filterv (check-extension p)\\n                          (files-of-as-string dir)))\\n                 formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\" imgFormats)" "(defn list-images [dir formats]\\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  (into {} (map (fn [p]\\n                (into {} (filter (check-extension p)\\n                                  (files-of-as-string dir))))\\n                 formats)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\" imgFormats)" "(def img-regex\\n  (re-pattern (str \\"(?i).+\\\\.(?\:(\\" (join \\"|\\"\\n                               imgFormats) \\")\\")))" "(def img-regex\\n  (re-pattern (str \\".+\\\\.(?i\:(\\" (join \\"|\\"\\n                           imgFormats) \\")\\")))" "(def exif-directory-regex\\n  (re-pattern (str \\"(?i)(\\" (join \\"|\\"\\n                                [\\"Exif\\" \\"JPEG\\" \\"JFIF\\"\\n                                 \\"Agfa\\" \\"Canon\\" \\"Casio\\" \\"Epson\\"\\n                                 \\"Fujifilm\\" \\"Kodak\\" \\"Kyocera\\"\\n                                 \\"Leica\\" \\"Minolta\\" \\"Nikon\\" \\"Olympus\\"\\n                                 \\"Panasonic\\" \\"Pentax\\" \\"Sanyo\\"\\n                                 \\"Sigma/Foveon\\" \\"Sony\\"]) \\")\\")))" "exif-for-file" "(exif-directory-regex)" "(str exif-directory-regex)" "(def exif-directory-regex\\n  (re-pattern (str \\".+\\\\.(?\:(\\" (join \\"|\\"\\n                               imgFormats) \\")\\")))" "(def exif-directory-regex\\n  (re-pattern (str \\".+\\\\.(?i\:(\\" (join \\"|\\"\\n                                imgFormats) \\"))\\")))" "(def exif-directory-regex\\n  (re-pattern (str \\".+\\\\.(?i\:(\\" (join \\"|\\"\\n                                [\\".CR2\\" \\".NEF\\" \\".RAW\\" \\".DNG\\"]) \\"))\\")))" "(def exif-directory-regex\\n  (re-pattern (str \\".+.(?i\:(\\" (join \\"|\\"\\n                               [\\".CR2\\" \\".NEF\\" \\".RAW\\" \\".DNG\\"]) \\"))\\")))" "(def exif-directory-regex\\n  (re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 [\\".CR2\\" \\".NEF\\" \\".RAW\\" \\".DNG\\"]) \\"))\\")))" "(str exif-directory-regex)" "  (re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"]) \\"))\\")))" "  (re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"]) \\"))\\"))" "(def exif-directory-regex\\n  (re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"]) \\"))\\")))" "(str exif-directory-regex)" "(re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"]) \\"))\\"))" "(re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 imgFormats) \\"))\\"))" "(def imgFormats (conj rawFormats \\"jpg\\"))" "(re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 imgFormats) \\"))\\"))" "(def rawFormats [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"])" "(re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 imgFormats) \\"))\\"))" "(def rawFormats [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"])\\n(def imgFormats (conj rawFormats \\"jpg\\"))" "(re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 imgFormats) \\"))\\"))" "(defn check-extension\\n  \\"\\"\\n  [p]\\n  (filter \#(re-find img-regex %) p))" "(def rawFormats [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"])\\n(def imgFormats (conj rawFormats \\"jpg\\"))\\n\\n;case insesitiv\\n(def img-regex\\n  (re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 imgFormats) \\"))\\")))" "(defn check-extension\\n  \\"\\"\\n  [p]\\n  (filter \#(re-find img-regex %) p))" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (into {} (filter \#(re-find img-regex %) (files-of-as-file dir)))\\n  )" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (into {} (filter \#(re-find img-regex %) (files-of-as-string dir)))\\n  )" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(files-of-as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (into {} (filter \#(re-find img-regex (.getName %)) (files-of-as-file dir)))\\n  )" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn files-of-as-file [dir]\\n  \\"Lists all files in the given path incl. this folder (./)\\"\\n    (into {} (file-seq (clojure.java.io/file dir))))" "(list-images (defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (into {} (filter \#(re-find img-regex  %) (files-of-as-file dir)))\\n  )\\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(filter \#(> (second %) 100)\\n\\t       {\:a 1\\n\\t        \:b 2\\n\\t        \:c 101\\n\\t        \:d 102\\n\\t        \:e -1})\\n([\:c 101] [\:d 102])" "(filter \#(> (second %) 100)\\n\\t       {\:a 1\\n\\t        \:b 2\\n\\t        \:c 101\\n\\t        \:d 102\\n\\t        \:e -1})" "(files-of-as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn files-of-as-file [dir]\\n  \\"Lists all files in the given path incl. this folder (./)\\"\\n    (file-seq (clojure.java.io/file dir)))" "(files-of-as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn files-of-as-file-seq [dir]\\n  \\"Lists all files in the given path incl. this folder (./)\\"\\n    (file-seq (clojure.java.io/file dir)))" "(files-of-as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(def list-images-names\\n  [dir]\\n  (map \#(.getName %) (files-of-as-file-seq dir))\\n  )" "(defn list-images-names\\n  [dir]\\n  (map \#(.getName %) (files-of-as-file-seq dir))\\n  )" "(list-images-names \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (filter \#(re-find img-regex  (.getName %)) (files-of-as-file dir)))" "(def rawFormats [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"])\\n(def imgFormats (conj rawFormats \\"jpg\\"))\\n\\n;case insesitiv\\n(def img-regex\\n  (re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 imgFormats) \\"))\\")))" "(ns Sorter.readDir\\n  (\:use [clojure.string \:only [join]])\\n  )\\n;;For NOT nil eq \!\=\\n(def not-nil? (complement nil?))\\n\\n(def rawFormats [\\"CR2\\" \\"NEF\\" \\"RAW\\" \\"DNG\\"])\\n(def imgFormats (conj rawFormats \\"jpg\\"))\\n\\n;case insesitiv\\n(def img-regex\\n  (re-pattern (str \\".+\\\\\\\\.(?i\:(\\" (join \\"|\\"\\n                                 imgFormats) \\"))\\")))" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (filter \#(re-find img-regex  (.getName %)) (files-of-as-file dir)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-file-names\\n  [dir]\\n  (map \#(.getName %) (files-of-as-file-seq dir))\\n  )" "(defn list-files-as-file-seq [dir]\\n  \\"Lists all files in the given path incl. this folder (./)\\"\\n    (file-seq (clojure.java.io/file dir)))" "(defn list-file-names\\n  [dir]\\n  (map \#(.getName %) (list-files-as-file-seq dir))\\n  )" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (filter \#(re-find img-regex (.getName %)) (list-file-names dir)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (filter \#(re-find img-regex  %) (list-file-names dir)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (into {} (filter \#(re-find img-regex  %) (list-file-names dir))))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-file-names\\n  [dir]\\n  (map \#(.getAbsolutePath %) (list-files-as-file-seq dir))\\n  )" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (filter \#(re-find img-regex  %) (list-file-names dir)))" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-images \\n  \\"gitb einen vector mit bildern zur\u00FCck, die den gegebenen Dateiendungen entsprechen\\"\\n  [dir]\\n  (filter \#(re-find img-regex  %) (list-file-names-with-path dir)))\\n  \\n;list only file names\\n(defn list-file-names\\n  [dir]\\n  (map \#(.getName %) (list-files-as-file-seq dir))\\n  )\\n\\n(defn list-file-names-with-path\\n  [dir]\\n  (map \#(.getAbsolutePath %) (list-files-as-file-seq dir))\\n  )" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-filenames\\n  \\"\\"\\n  [dir]\\n  (map \#(.getName %) (list-files-as-file-seq dir))\\n  )" "(list-filenames \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn list-files-as-file-seq [dir]\\n  \\"Lists all files in the given path incl. this folder (./)\\"\\n    (file-seq (file dir)))" "(defn list-files-as-file-seq [dir]\\n  \\"Lists all files in the given path incl. this folder (./)\\"\\n    (file-seq (clojure.java.io/file dir)))" "(list-files-as-file-seq \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(list-filenames \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(list-filenames \\"/home/thomas/\\")" "(defn rename\\n  \\"Rename old-path to new-path.\\"\\n  [old-path new-path]\\n  (.renameTo (as-file old-path) (as-file new-path)))" "(ns Sorter.readDir\\n  ^{\:doc \\"what is this ns about? todo\: insert description\\"\\n      \:author \\"Thomas Breitbach & Andr\u00E9 Wi\u00DFner\\"}\\n  (\:use [clojure.string \:only [join]])\\n  (\:import java.io.File)\\n  )" "(defn rename\\n  \\"Rename old-path to new-path.\\"\\n  [old-path new-path]\\n  (.renameTo (as-file old-path) (as-file new-path)))" "(ns Sorter.readDir\\n  ^{\:doc \\"what is this ns about? todo\: insert description\\"\\n      \:author \\"Thomas Breitbach & Andr\u00E9 Wi\u00DFner\\"}\\n  (\:use [clojure.string \:only [join]])\\n  (\:import java.io.File)\\n  (\:require [clojure.java.io \:as io])\\n  )" "(defn list-files-as-file-seq [dir]\\n  \\"Lists all files in the given path incl. this folder (./)\\"\\n    (file-seq (io/file dir)))" "(list-files-as-file-seq \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(defn rename\\n  \\"Rename old-path to new-path.\\"\\n  [old-path new-path]\\n  (.renameTo (io/as-file old-path) (io/as-file new-path)))" "(defn rename-file\\n  \\"Rename old-path to new-path.\\"\\n  [old-path new-path]\\n  (.renameTo (io/as-file old-path) (io/as-file new-path)))" "(rename-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw/Viola.jpg\\" \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw/test2.jpg\\")\\"" "(rename-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw/Viola.jpg\\" \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw/test2.jpg\\")" "(defn- as-file [path]\\n  \\"The challenge is to work nicely with *cwd*\\"\\n  (cond\\n   (instance? File path) path\\n   (\= path \\"\\") (io/as-file \\"\\")\\n   (\= path \\".\\") (io/as-file *cwd*)\\n   \:else\\n   (let [ try (new File path) ]\\n         (if (.isAbsolute try)\\n           try\\n           (new File *cwd* path)))))" "(def ^\:dynamic *cwd* (.getCanonicalPath (io/as-file \\".\\")))" "(defn- as-file [path]\\n  \\"The challenge is to work nicely with *cwd*\\"\\n  (cond\\n   (instance? File path) path\\n   (\= path \\"\\") (io/as-file \\"\\")\\n   (\= path \\".\\") (io/as-file *cwd*)\\n   \:else\\n   (let [ try (new File path) ]\\n         (if (.isAbsolute try)\\n           try\\n           (new File *cwd* path)))))" "(defn rename-file\\n  \\"Rename old-path to new-path.\\"\\n  [old-path new-path]\\n  (.renameTo (as-file old-path) (as-file new-path)))" "(rename-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw/Viola.jpg\\" \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/sw/test2.jpg\\")" "(list-files-as-file-seq \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(clojure.java.io/as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5836.JPG\\")" "(.renameTo (io/as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5836.JPG\\")\\n  (io/as-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/blaaaaaaa.JPG\\"))" "(defn rename-file\\n  \\"Rename old-path to new-path.\\"\\n  [old-path new-path]\\n  (.renameTo (io/as-file old-path) (io/as-file new-path)))" "(rename-file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5836.JPG\\"\\n \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/blaaaaaaa.JPG\\")" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))" "(ns Sorter.exif\\n  ^\\"Wrapper for https\://code.google.com/p/metadata-extractor/\\"\\n  (\:use [clojure.string \:only [join]])\\n  (\:import [java.io BufferedInputStream FileInputStream]\\n           [com.drew.imaging ImageMetadataReader]))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))" "(exif-for-file (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "((exif-for-file \\n   (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  \:Date/Time)" "(select-keys(exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  \\"Date/Time\\")" "(select-keys(exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (\\"Date/Time\\"))" "(select-keys\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (Date/Time))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (\\"Date/Time\\"))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (\\"\:Date/Time\\"))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (\:Date/Time))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [\:Date/Time])" "(exif-for-file (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n     (map extract-from-tag tags))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n     (map extract-from-tag tags)))" "(exif-for-file (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))" "(defn exif-for-filename\\n  \\"Loads a file from a give filename and extracts exif information into a map\\"\\n  [filename]\\n  (exif-for-file (FileInputStream. filename)))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (hash-map (map extract-from-tag tags))))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (map extract-from-tag tags)))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(defn- extract-from-tag\\n  [tag]\\n  (into {} (map \#(hash-map (str \\"\:\\" (.getTagName %)) (.getDescription %)) tag)))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [\:Date/Time])" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [\\"\:Date/Time Digitized\\"])" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [keyword \\"Date/Time Original\\"])" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [(keyword \\"Date/Time Original\\")])" "(keyword \\"Date/Time Original\\")" "(exif-for-file \\n            (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (map extract-from-tag tags)))" "(exif-for-file \\n            (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(defn- extract-from-tag\\n  [tag]\\n  (map \#(hash-map (str \\"\:\\" (.getTagName %)) (.getDescription %)) tag))" "(exif-for-file \\n            (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [(keyword \\"Date/Time Original\\")])" "(defn- extract-from-tag\\n  [tag]\\n  (map \#(hash-map (keyword (.getTagName %)) (.getDescription %)) tag))" "(exif-for-file \\n            (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [(keyword \\"Date/Time Original\\")])" "\\n(defn- extract-from-tag\\n  [tag]\\n  (into {} (map \#(hash-map (keyword (.getTagName %)) (.getDescription %)) tag)))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (map extract-from-tag tags)))\\n\\n(defn exif-for-filename\\n  \\"Loads a file from a give filename and extracts exif information into a map\\"\\n  [filename]\\n  (exif-for-file (FileInputStream. filename)))" "(exif-for-file \\n            (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(defn exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))" "(exif-for-file \\n            (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [(keyword \\"Date/Time Original\\")])" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  [(keyword \\"Software\\")])" "(def test {\:monday 1, \:tuesday 2})" "(def blubb {\:monday 1, \:tuesday 2})" "(get blubb monday)" "(get blubb \:monday)" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  \:Software)" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (keyword \\"Software\\"))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (keyword \\"Flash\\"))" "(get\\n  (exif-for-file \\n         (clojure.java.io/file \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")) \\n  (keyword \\"Date/Time Digitized\\"))" "(defn exif-tag-for-filename\\n  \\"\\"\\n  [filename tag]\\n  (get\\n     (exif-for-filename filename) \\n     (keyword tag)))" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                       \\"Date/Time Digitized\\")" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                       \\"Date/Time\\")" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                       \\"Date\\")" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                       \\"Date/Time Digitized\\")" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                       \\"Date\\")" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                       \\"Date/Time Original\\")" "(def exif-directory-regex\\n  (re-pattern (str \\"(?i)(\\" (join \\"|\\"\\n                                [\\"Exif\\" \\"JPEG\\"]) \\")\\")))" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                       \\"Date/Time Original\\")" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                     )" "(def exif-directory-regex\\n  (re-pattern (str \\"(?i)(\\" (join \\"|\\"\\n                                [\\"JPEG\\"]) \\")\\")))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                     )" "(def exif-directory-regex\\n  (re-pattern (str \\"(?i)(\\" (join \\"|\\"\\n                                [\\"Exif\\" \\"JPEG\\" \\"JFIF\\"\\n                                 \\"Agfa\\" \\"Canon\\" \\"Casio\\" \\"Epson\\"\\n                                 \\"Fujifilm\\" \\"Kodak\\" \\"Kyocera\\"\\n                                 \\"Leica\\" \\"Minolta\\" \\"Nikon\\" \\"Olympus\\"\\n                                 \\"Panasonic\\" \\"Pentax\\" \\"Sanyo\\"\\n                                 \\"Sigma/Foveon\\" \\"Sony\\"]) \\")\\")))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                     )" "(list-images \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "(list-images-with-path \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet\\")" "((exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \:Software)" "(defn exif-tags-for-filename\\n  \\"\\"\\n  [filename tag-seq]\\n  (select-keys\\n    (exif-for-filename filename)\\n    tag-seq))" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software (keyword \\"Exif Image Height\\")])" "(ns Sorter.exif\\n  ^\\"Wrapper for https\://code.google.com/p/metadata-extractor/\\"\\n  (\:use [clojure.string \:only [join]])\\n  (\:import [java.io File BufferedInputStream FileInputStream]\\n           [com.drew.imaging ImageMetadataReader]))" "(defprotocol exif\\n  (exif-data [x]))" "(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s)))" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(defprotocol exif\\n  (exif-data [x])\\n  (exif-data [x tag] ))" "(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data [f tag] \\n    (get\\n     (exif-for-file f) \\n     (keyword tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data [s tag]\\n      (exif-tag-for-filename s tag)))" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           \\"Software\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           \\"\:Software\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           [\:Software \:Software])" "(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data [f tag] \\n    (get\\n     (exif-for-file f) \\n     (keyword tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data [s tag]\\n    (instance? String tag\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           [\:Software \:Software])" "\\n(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data [f tag] \\n    (get\\n     (exif-for-file f) \\n     (keyword tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           [\:Software \:Software])" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           [\:Software (keyword \\"Thumbnail Compression\\")])" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software (keyword \\"Thumbnail Compression\\")])" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n          \\"Software\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           [\:Software (keyword \\"Thumbnail Compression\\")])" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           \\"Software\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"\:Software\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Data/Time Original\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Data/Time Digitalized\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           \\"Software\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           )" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(exif-tag-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(exif-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(exif-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \\"Software\\")" "(exif-tag-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \\"Software\\")" "(exif-tag-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \\n                   [\\"\:Software\\"])" "(exif-tags-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \\n                   [\\"\:Software\\"])" "(exif-tags-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \\n                   [\\"\:Software\\" \\"\:Date/Time Digitized\\"])" "(exif-tags-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \\n                   [\:Software \:Date/Time Digitized])" "(exif-tags-for-file (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\") \\n                   [\:Software (keyword \\"Date/Time Digitized\\")])" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")" "(exif-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\" \\"Software\\")" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\" \\"Software\\")" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\" \\"Software\\")" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\" [\:Software])" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software \:blubb])" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software (keyword \\"Date/Time Digitized\\")])" "(defn- exif-tags-for-filename\\n  \\"Returns a map containing only those entries in map whose key is in keys\\"\\n  [filename tag-seq]\\n  (exif-tags-for-file (FileInputStream. filename) tag-seq))" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software \:blubb])" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software])" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software])" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        \\"Software\\")" "(exif-tag-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software])" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        \\"Software\\")" "(exif-tags-for-filename \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n                        [\:Software])" "(exif-data \\"\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software])" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software \:blubb])" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(defprotocol exif\\n  (exif-data [x] \\"Todo\: Dokumentation der Funktion\\")\\n  (exif-data-by-tag [x tag] \\"Todo\: Dokumentation der Funktion\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data-by-tag [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data-by-tag [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software \:blubb])" "(exif-data-by-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software \:blubb])" "(defprotocol exif\\n  (exif-data [x] [x tag] \\"Todo\: Dokumentation der Funktion\\"))" "(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software \:blubb])" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           )" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n            \:Software)" "((exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"))\\n            \:Software)" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           )" "(defprotocol exif\\n  (exif-data [x] [x tag] \\"Todo\: Dokumentation der Funktion\\")\\n (exif-data-by-tag [x tag] \\"Todo\: Dokumentation der Funktion\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data-by-tag [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data-by-tag [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))" "(defprotocol exif\\n  (exif-data [x] \\"Todo\: Dokumentation der Funktion\\")\\n (exif-data-by-tag [x tag] \\"Todo\: Dokumentation der Funktion\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-data-by-tag [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-data-by-tag [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           )" "((exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n            ) \:Software)" "((exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n            ) \:Software)" "(defprotocol exif\\n  (exif-data [x] \\"Todo\: Dokumentation der Funktion\\")\\n (exif-tag [x tag] \\"Todo\: Dokumentation der Funktion\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data [f] (exif-for-file f))\\n  (exif-tag [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data [s] (exif-for-filename s))\\n  (exif-tag [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           )" "(exif-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software])" "(exif-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-tag \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           \\"Software\\")" "(exif-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           )" "(exif-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software \:Model])" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n           )" "((exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n            ) \:Model)" "((exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n            ) \:Model \:Software\\n             )" "((exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\"\\n            ) [\:Software \:Model])" "(exif-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           [\:Software \:Model])" "(exif-tag (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/bearbeitet/IMG_5793.JPG\\")\\n           \\"Software\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" \\"Model\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\")" "(defprotocol exif\\n  (exif-data \\n    [x tag] \\"\\"\\n    [x] \\"Returns image EXIF data of a java.io.File or file path (as String)\\")\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\")" "(defprotocol exif\\n  (exif-data \\n    ([x tag]) \\"\\"\\n    ([x]) \\"Returns image EXIF data of a java.io.File or file path (as String)\\")\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))" "(defprotocol exif\\n  (exif-data \\n    [x tag] \\"\\"\\n    [x] \\"Returns image EXIF data of a java.io.File or file path (as String)\\")\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))" "(defprotocol exif\\n  (exif-data \\n    ([x] \\"Returns image EXIF data of a java.io.File or file path (as String)\\")\\n    ([x tag] \\"\\"))\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))" "(defprotocol exif\\n  (exif-data \\n    [x] \\"Returns image EXIF data of a java.io.File or file path (as String)\\"\\n    ([x tag] \\"\\"))\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))" "(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (exif-tags-for-file f tag)))\\n    ([f]\\n      (exif-for-file f)))\\n  (exif-tag [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (exif-tags-for-filename s tag)))\\n    ([s]  \\n      (exif-for-filename s)))\\n  (exif-tag [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" \\"Model\\")" "(defprotocol exif\\n  (exif-data \\n    [x]\\n    [x tag])\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (exif-tags-for-file f tag)))\\n    ([f]\\n      (exif-for-file f)))\\n  (exif-tag [f tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-file f tag)\\n      (exif-tags-for-file f tag)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (exif-tags-for-filename s tag)))\\n    ([s]  \\n      (exif-for-filename s)))\\n  (exif-tag [s tag]\\n    (if (instance? String tag)\\n      (exif-tag-for-filename s tag)\\n      (exif-tags-for-filename s tag))))" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" \\"Model\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" \\"Model\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" [\:Model])" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" [\:Model \:F-Number])" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\") [\:Model \:F-Number])" "(defprotocol exif\\n  (exif-data \\n    [x] \\"\\"\\n    [x tag] \\"\\")\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\") [\:Model \:F-Number])" "(defprotocol exif\\n  (exif-data \\n    [x]\\n    [x tag] \\"\\")\\n  (exif-tag [x tag] \\"Returns the desired exif tag and value of a java.io.FIle or file path (as String)\\"))" "(exif-data (File. \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\") [\:Model \:F-Number])" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" [\:Model \:F-Number])" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\" \\"Model\\")" "(exif-data \\"/home/thomas/Bilder/15.11 Party bei Katha/jpg/IMG_5935.JPG\\")" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\")" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" \\"Model\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file]\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (.getDirectories metadata)\\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\")" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" [\:Model \:Make \:GPS])" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" [\:Model \:Make \:GPS*])" "(def exif-gps-directory\\n  [(keyword GPS Altitude Ref) (keyword GPS Latitude Ref)])" "(def exif-gps-directory\\n  [(keyword \\"GPS Altitude Ref\\") (keyword \\"GPS Latitude Ref\\")])" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" exif-gps-directory)" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" [\:Model exif-gps-directory])" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" exif-gps-directory)" "(def exif-gps-directory\\n  [(keyword \\"GPS Altitude Ref\\") \\n   (keyword \\"GPS Longitude\\")\\n   (keyword \\"GPS Altitude\\")\\n   (keyword \\"GPS Processing Method\\")\\n   (keyword \\"GPS Img Direction Ref\\")\\n   (keyword \\"GPS Img Direction\\")])" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" exif-gps-directory)" "(def exif-gps-directory\\n  [(keyword \\"GPS Altitude Ref\\") \\n   (keyword \\"GPS Longitude\\")\\n   (keyword \\"GPS Altitude\\")\\n   (keyword \\"GPS Processing Method\\")\\n   (keyword \\"GPS Img Direction Ref\\")\\n   (keyword \\"GPS Img Direction\\")\\n   (keyword \\"GPS Latitude\\")\\n   (keyword \\"GPS Latitude Ref\\")\\n   (keyword \\"GPS Longitude Ref\\")\\n   (keyword \\"GPS Date Stamp\\")\\n   (keyword \\"GPS Time-Stamp\\")])" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" exif-gps-directory)" "exif-gps-directory" "(defprotocol exif\\n  (exif-data \\n    [x]\\n    [x tag] \\"Returns exif data (or if stated only the desired exif tag(s)) of a java.io.File or file path (as String)\\"))\\n\\n(extend-protocol exif\\n  File String\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (exif-tags-for-file f tag)))\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (exif-tags-for-filename s tag)))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" \\"model\\")" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" \\"Model\\")" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" [\:Model])" "(defprotocol exif\\n  (exif-data \\n    [x]\\n    [x tag] \\"Returns exif data (or if stated only the desired exif tag(s)) of a java.io.File or file path (as String)\\"))\\n\\n(extend-protocol exif\\n  File String\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (exif-tags-for-file f tag))))\\n  \\n  File clojure.core.Vec\\n  (exif-data \\n    ([f tags]\\n        (exif-tags-for-file f tags)))\\n  \\n  File\\n  (exif-data\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (exif-tags-for-filename s tag)))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" [\:Model])" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") [\:Model])" "(defprotocol exif\\n  (exif-data \\n    [x]\\n    [x tag] \\"Returns exif data (or if stated only the desired exif tag(s)) of a java.io.File or file path (as String)\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (exif-tags-for-file f tag)))\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (exif-tags-for-filename s tag)))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") [\:Model])" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") exif-gps-directory)" "(defrecord Artikel [artNr bez preis])\\n\\n(defn artikel [artNr bez preis]\\n  (Artikel. artNr bez preis))\\n\\n(def test-artikel\\n  [(artikel 1 \\"BitteEinBit\\" 1.20)\\n   (artikel 2 \\"VinoVino\\" 9.90)\\n   (artikel 3 \\"Hennessy\\" 24.95)])\\n\\ntest-artikel" "(defn exif-gps-directory\\n  [(keyword \\"GPS Altitude Ref\\") \\n   (keyword \\"GPS Longitude\\")\\n   (keyword \\"GPS Altitude\\")\\n   (keyword \\"GPS Processing Method\\")\\n   (keyword \\"GPS Img Direction Ref\\")\\n   (keyword \\"GPS Img Direction\\")\\n   (keyword \\"GPS Latitude\\")\\n   (keyword \\"GPS Latitude Ref\\")\\n   (keyword \\"GPS Longitude Ref\\")\\n   (keyword \\"GPS Date Stamp\\")\\n   (keyword \\"GPS Time-Stamp\\")])" "(def exif-gps-directory\\n  [(keyword \\"GPS Altitude Ref\\") \\n   (keyword \\"GPS Longitude\\")\\n   (keyword \\"GPS Altitude\\")\\n   (keyword \\"GPS Processing Method\\")\\n   (keyword \\"GPS Img Direction Ref\\")\\n   (keyword \\"GPS Img Direction\\")\\n   (keyword \\"GPS Latitude\\")\\n   (keyword \\"GPS Latitude Ref\\")\\n   (keyword \\"GPS Longitude Ref\\")\\n   (keyword \\"GPS Date Stamp\\")\\n   (keyword \\"GPS Time-Stamp\\")])" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") exif-gps-directory)" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" exif-gps-directory)" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (GpsDirectory. blubb))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (GpsDirectory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (Directory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (GpsDirectory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (Directory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (GpsDirectory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" [\:Model])" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"Model\\")" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (.GpsDirectory))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" [\:Model])" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (GpsDirectory))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (GpsDirectory))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (if (instance? Directory tag)\\n          (println tag)\\n          (exif-tags-for-file f tag))))\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (if (instance? Directory tag)\\n          (println (type tag))\\n          (exif-tags-for-filename s tag))))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory\\n                                                                      ))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println dir)\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (GpsDirectory)))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println dir)\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (com.drew.metadata.exif.GpsDirectory)))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println dir)\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (.GpsDirectory)))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println dir)\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (com.drew.metadata.exif.GpsDirectory)))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (if (instance? Directory tag)\\n          (exif-for-file f tag)\\n          (exif-tags-for-file f tag))))\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (if (instance? Directory tag)\\n          (println (type tag))\\n          (exif-tags-for-filename s tag))))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println dir)\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (type com.drew.metadata.exif.GpsDirectory)))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println (type com.drew.metadata.exif.GpsDirectory))\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (type com.drew.metadata.exif.GpsDirectory)))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println (type com.drew.metadata.exif.GpsDirectory))\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (type com.drew.metadata.exif.GpsDirectory)))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println (type com.drew.metadata.exif.GpsDirectory))\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata com.drew.metadata.exif.GpsDirectory))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println (type com.drew.metadata.exif.GpsDirectory))\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (str (GpsDirectory) \\".class\\")))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir]\\n  ((println (type com.drew.metadata.exif.GpsDirectory))\\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata (str (com.drew.metadata.exif.GpsDirectory) \\".class\\")))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") nil)" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") null)" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") nil)" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir] \\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata com.drew.metadata.exif.GpsDirectory))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") nil)" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  [file dir] \\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata com.drew.metadata.exif.GpsDirectory))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags)))\\n  \\n  [file]\\n  (exif-for-file file nil))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file dir] \\n  (let [metadata (ImageMetadataReader/readMetadata file)\\n        exif-dirs (if (nil? dir)\\n                    (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                    (.getDirectory metadata com.drew.metadata.exif.GpsDirectory))   \\n        tags (map \#(.getTags %) exif-dirs)]\\n    (into {} (map extract-from-tag tags))))\\n  \\n  ([file]\\n  (exif-for-file file nil)))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata com.drew.metadata.exif.GpsDirectory))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata GpsDirectory))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata \\"GpsDirectory.class\\"))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata GpsDirectory))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-filename\\n  \\"Loads a file from a give filename and extracts exif information into a map\\"\\n  ([filename]\\n    (exif-for-file (FileInputStream. filename)))\\n  ([filename dir]\\n    (exif-for-file (FileInputStream. filename) dir)))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata GpsDirectory.class))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata com.drew.metadata.exif.GpsDirectory.class))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata com.drew.metadata.exif.GpsDirectory))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class GpsDirectory.)))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class GpsDirectory.)))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (GpsDirectory.))))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (java.lang.Class/forName \\"GpsDirectory\\")))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (java.lang.Class/forName \\"com.drew.metadata.exif.GpsDirectory\\")))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata GpsDirectory))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (class (String. \\"com.drew.metadata.exif.GpsDirectory\\")))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (String. \\"com.drew.metadata.exif.GpsDirectory\\"))))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") nil)" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (File.))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (String. \\"com.drew.metadata.exif.GpsDirectory\\"))))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (String. \\"GpsDirectory\\"))))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (String. \\"GpsDirectory.class\\"))))   \\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (String. \\"GpsDirectory.class\\"))))\\n          (println exif-dirs)\\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (String. \\"GpsDirectory.class\\"))))\\n          bla (println exif-dirs)\\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(class (String. \\"GpsDirectory.class\\"))" "(class (GpsDirectory. \\"GpsDirectory.class\\"))" "(class (GpsDirectory. \\"GpsDirectory\\"))" "(class (GpsDirectory.))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (GpsDirectory.))))\\n          bla (println exif-dirs)\\n          tags (map \#(.getTags %) exif-dirs)]\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (GpsDirectory.))))\\n          tags (map \#(.getTags %) exif-dirs)]\\n      (println (.getTagNameMap exif-dirs))\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (GpsDirectory.))))\\n          tags (map \#(.getTags %) exif-dirs)]\\n      (println (.getGeoLocation exif-dirs))\\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (GpsDirectory.))))\\n          bla (println (.getTags exif-dirs))\\n          tags (map \#(.getTags %) exif-dirs)]\\n      \\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (.getDirectory metadata (class (GpsDirectory.))))\\n          bla (println (into {}(.getTags exif-dirs)))\\n          tags (map \#(.getTags %) exif-dirs)]\\n      \\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (let [metadata (ImageMetadataReader/readMetadata file)\\n          exif-dirs (if (nil? dir)\\n                      (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n                      (into {} (.getDirectory metadata (class (GpsDirectory.)))))\\n          bla (println exif-dirs)\\n          tags (map \#(.getTags %) exif-dirs)]\\n      \\n      (into {} (map extract-from-tag tags)))))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (if (nil? dir)\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (into {} (map extract-from-tag tags)))\\n      (.getGeoLocation (.getDirectory metadata (class (GpsDirectory.))))\\n      )))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (if (nil? dir)\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (into {} (map extract-from-tag tags)))\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            (.getGeoLocation (.getDirectory metadata (class (GpsDirectory.))))])\\n      )))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (if (nil? dir)\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (into {} (map extract-from-tag tags)))\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            geo (.getGeoLocation (.getDirectory metadata (class (GpsDirectory.))))])\\n      )))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(let \\n  [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n         geo (.getGeoLocation (.getDirectory metadata (class (GpsDirectory.))))])" "(let \\n  [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n         geo  (.getDirectory metadata (class (GpsDirectory.)))])" "((let \\n   [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n          geo  (.getDirectory metadata (class (GpsDirectory.)))])\\n  (println geo))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"bla\\")" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") nil)" "(let [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (into {} (map extract-from-tag tags)))" "(let [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (println (map extract-from-tag tags)))" "(let [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n            geo (.getDirectory metadata (class (GpsDirectory.)))]  \\n        (into {} geo))" "(let [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n            geo (.getGeoLocation (.getDirectory metadata (class (GpsDirectory.))))]  \\n        (into {} geo))" "(let [metadata (ImageMetadataReader/readMetadata (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))\\n            geo (.getGeoLocation (.getDirectory metadata (class (GpsDirectory.))))]  \\n        (println geo))" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (if (nil? dir)\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (into {} (map extract-from-tag tags)))\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            geo-tags (.getTags (.getDirectory metadata (class (GpsDirectory.))))]\\n        (into {} (map extract-from-tag geo-tags)))\\n      )))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"nnn\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (if (nil? dir)\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (into {} (map extract-from-tag tags)))\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            geo-tags (.getTags (.getDirectory metadata (class (GpsDirectory.))))]\\n        (into {} (extract-from-tag geo-tags)))\\n      )))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"nnn\\")" "(defn- exif-for-file\\n  \\"Takes an image file (as a java.io.InputStream or java.io.File) and extracts exif information into a map\\"\\n  ([file]\\n    (exif-for-file file nil))\\n  \\n  ([file dir] \\n    (if (nil? dir)\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            exif-dirs (filter \#(re-find exif-directory-regex (.getName %)) (.getDirectories metadata))\\n            tags (map \#(.getTags %) exif-dirs)]  \\n        (into {} (map extract-from-tag tags)))\\n      (let [metadata (ImageMetadataReader/readMetadata file)\\n            geo-tags (.getTags (.getDirectory metadata GpsDirectory))]\\n        (into {} (extract-from-tag geo-tags)))\\n      )))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") \\"nnn\\")" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") GpsDirectory)" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") ExifThumbnailDirectory)" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") ExifThumbnailDirectory)" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") ExifThumbnailDirectory)" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\"))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") ExifThumbnailDirectory)" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (class (ExifThumbnailDirectory.))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (class (ExifThumbnailDirectory.)))" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") ExifThumbnailDirectory)" "(exif-for-file (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") [\:Model])" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") [\:Model])" "(defprotocol exif\\n  (exif-data \\n    [x]\\n    [x tag] \\"Returns exif data (or if stated only the desired exif tag(s)) of a java.io.File or file path (as String)\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (if (instance? Directory tag) ;funktioniert noch nicht\!\\n          ((println tag) (exif-for-file f tag))\\n          (exif-tags-for-file f tag))))\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (if (instance? Directory tag)\\n          (exif-for-filename s tag)\\n          (exif-tags-for-filename s tag))))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") [\:Model])" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") GpsDirectory)" "(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (if (instance? Directory tag) ;funktioniert noch nicht\!\\n          (println (type tag));(exif-for-file f tag)\\n          (exif-tags-for-file f tag))))\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (if (instance? Directory tag)\\n          (exif-for-filename s tag)\\n          (exif-tags-for-filename s tag))))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") GpsDirectory)" "(defprotocol exif\\n  (exif-data \\n    [x]\\n    [x tag] \\"Returns exif data (or if stated only the desired exif tag(s)) of a java.io.File or file path (as String)\\"))\\n\\n(extend-protocol exif\\n  File\\n  (exif-data \\n    ([f tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-file f tag)\\n        (if (instance? Directory tag) ;funktioniert noch nicht\!\\n          (println \\"dir\\");(exif-for-file f tag)\\n          (exif-tags-for-file f tag))))\\n    ([f]\\n      (exif-for-file f)))\\n  \\n  String\\n  (exif-data \\n    ([s tag]\\n      (if (instance? String tag)\\n        (exif-tag-for-filename s tag)\\n        (if (instance? Directory tag)\\n          (exif-for-filename s tag)\\n          (exif-tags-for-filename s tag))))\\n    ([s]  \\n      (exif-for-filename s))))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") GpsDirectory)" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (.GpsDirectory))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (GpsDirectory.))" "(exif-data (File. \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\") (ExifThumbnailDirectory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (ExifThumbnailDirectory.))" "(exif-data \\"/home/thomas/Downloads/IMG_20140302_160056.jpg\\" (GpsDirectory.))" "(load-file \\"mycode.clj\\")" "(load-file \\"main.clj\\")" "(-> (or ns (class *ns*))\\r\\n      .getProtectionDomain .getCodeSource .getLocation .getPath)" "(-> clojure.lang.Atom (.getProtectionDomain) (.getCodeSource) (.getLocation))" "(-> Sorter.main (.getProtectionDomain) (.getCodeSource) (.getLocation))" "(seq(.getURLs(\\"Sorter.main\\")))" "(ns code.hello)" "(ns code.main)" "(ns Sorter.main)" "(def x)" "x" "(def ^\:dynamic x 1)" "x" "(x 2)" "(binding [x 2])" "x" "(binding [x 2])" "x" "(def ^\:dynamic test \\"test1\\")" "(def ^\:dynamic tagliste \\"test1\\")" "tagliste" "(binding [tagliste \\"bla\\"])" "tagliste" "(binding [tagliste \\"bla\\"]\\n  (tagliste))" "(binding [tagliste 'bla])" "(binding [tagliste 'bla] (tagliste))" "(defn foo [] (def m \\"test\\"\\n               ))" "(foo \\"bla\\")" "(def theInPath \\"./\\")\\r\\n    (def theOutPath theInPath)" "(theOutPath)" "(def theInPath \\"./\\")" "(println theInPath)" "(println theOutPath)" "(format \\"%s\\" \\"test\\")" "(def tagList (str))" "(tagList (format \\"%s\\" \\"Date\\"))" "(def tagList (str))" "(tagList (str (format \\"%s\\" \\"Date\\")))" "((java.io.File. \\"small_page.html\\")\\r\\n            .getPath)" "width" "class"]
eclipse.preferences.version=1
